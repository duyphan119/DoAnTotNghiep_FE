import { ButtonControl, DataManagement, DataTable } from "@/components";
import { AdminLayout } from "@/layouts";
import { VariantValueModel } from "@/models";
import { confirmDialogActions } from "@/redux/slice/confirmDialogSlice";
import {
  variantValueActions,
  variantValueSelector,
} from "@/redux/slice/variantValueSlice";
import { useAppDispatch } from "@/redux/store";
import helper from "@/utils/helpers";
import { protectedRoutes } from "@/utils/routes";
import CheckIcon from "@mui/icons-material/Check";
import ClearIcon from "@mui/icons-material/Clear";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import { useEffect } from "react";
import { useSelector } from "react-redux";
import { UserJson } from "@/types/json";
import { UserModel } from "@/models";
import { requireAdminProps } from "@/lib";
import { GetServerSidePropsContext } from "next";
import { fetchSelector } from "@/redux/slice/fetchSlice";

type Props = { profile: UserJson | null };
const LIMIT = 10;
const VariantValues = ({ profile }: Props) => {
  const appDispatch = useAppDispatch();
  const router = useRouter();
  const { variantValueData } = useSelector(variantValueSelector);
  const { deleted } = useSelector(fetchSelector);
  const handleDeleteAll = (ids: number[]) => {
    appDispatch(
      confirmDialogActions.show({
        onConfirm: () => {
          appDispatch(variantValueActions.fetchSoftDeleteMultiple(ids));
        },
      })
    );
  };

  const fetchData = () => {
    const { p, sortBy, sortType, q } = router.query;
    appDispatch(
      variantValueActions.fetchGetAll({
        p: +`${p}` || 1,
        limit: LIMIT,
        sortBy: `${sortBy || "id"}`,
        sortType: `${sortType}` === "ASC" ? "ASC" : "DESC",
        variant: true,
        ...(q ? { q: `${q}` } : {}),
      })
    );
  };

  useEffect(() => {
    fetchData();
  }, [router.query]);

  useEffect(() => {
    if (deleted) {
      fetchData();
    }
  }, [router.query, deleted]);

  return (
    <AdminLayout pageTitle="thuộc tính" profile={new UserModel(profile)}>
      <>
        <Head>
          <title>Quản lý thuộc tính</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <DataManagement
          paperTitle="Danh sách thuộc tính"
          count={variantValueData.count}
          limit={LIMIT}
          onDeleteAll={handleDeleteAll}
        >
          <DataTable
            rows={variantValueData.items}
            sortable={["code", "value", "type", "createdAt"]}
            hasCheck={true}
            columns={[
              {
                style: { width: 120, textAlign: "center" },
                key: "code",
                display: "Mã thuộc tính",
              },
              {
                style: { textAlign: "center" },
                key: "type",
                display: "Loại thuộc tính",
                render: (row: VariantValueModel) => row.variant.name,
              },
              {
                style: { textAlign: "center" },
                key: "value",
                display: "Giá trị",
              },
              {
                style: { width: 180, textAlign: "center" },
                key: "createdAt",
                display: "Ngày tạo",
                render: (row: VariantValueModel) =>
                  helper.formatDateTime(row.createdAt),
              },
              {
                style: { width: 152 },
                key: "actions",
                render: (row: VariantValueModel) => (
                  <>
                    <div style={{ display: "flex", alignItems: "center" }}>
                      <Link href={protectedRoutes.updateVariantValue(row.id)}>
                        <ButtonControl color="secondary" size="small">
                          Sửa
                        </ButtonControl>
                      </Link>
                      <ButtonControl
                        color="error"
                        onClick={() =>
                          appDispatch(
                            confirmDialogActions.show({
                              onConfirm: () => {
                                appDispatch(
                                  variantValueActions.fetchSoftDeleteSingle(
                                    row.id
                                  )
                                );
                              },
                            })
                          )
                        }
                        sx={{ ml: 1 }}
                        size="small"
                      >
                        Xóa
                      </ButtonControl>
                    </div>
                  </>
                ),
              },
            ]}
          />
        </DataManagement>
      </>
    </AdminLayout>
  );
};
export const getServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  return requireAdminProps(context);
};

export default VariantValues;
