import { Grid } from "@mui/material";
import dynamic from "next/dynamic";
import Head from "next/head";
import { useRouter } from "next/router";
import { ChangeEvent, useEffect, useState } from "react";
import { SubmitHandler, useForm } from "react-hook-form";

import "react-quill/dist/quill.snow.css";
import { getAllGroupProducts } from "../../../../apis/groupProduct";
import { getProductById, updateProduct } from "../../../../apis/product";
import { uploadSingle } from "../../../../apis/upload";
import {
  AdminFormPaper,
  FooterForm,
  InputControl,
  SelectControl,
} from "../../../../components";
import { AdminLayout } from "../../../../layouts";
import { MSG_SUCCESS } from "../../../../utils/constants";
import { GroupProduct, Product } from "../../../../utils/types";

const ReactQuill = dynamic(() => import("react-quill"), { ssr: false });

type Props = {
  product: Product;
};

type ProductInputs = {
  name: string;
  groupProductId: number;
  slug: string;
  description: string;
  detail: string;
  price: number;
  inventory: number;
};

const UpdateProduct = ({ product }: Props) => {
  const router = useRouter();

  const [detail, setDetail] = useState<string>("");
  const [files, setFiles] = useState<FileList | null>(null);
  const [groupProducts, setGroupProducts] = useState<GroupProduct[]>([]);
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<ProductInputs>({
    defaultValues: {
      name: product.name,
      groupProductId: product.groupProductId,
      slug: product.slug,
      detail: product.detail,
      inventory: product.inventory,
      description: product.description,
      price: product.price,
    },
  });
  const onSubmit: SubmitHandler<ProductInputs> = async (data) => {
    try {
      if (files) {
        const formData = new FormData();
        formData.append("image", files[0]);
        const { message, data: dataImage } = await uploadSingle(formData);
        if (message === MSG_SUCCESS) {
          console.log("Uploaded file: ", dataImage);
          const url = dataImage.secure_url;
          const { message: msg } = await updateProduct(product.id, {
            ...data,
            detail,
            groupProductId: +data.groupProductId,
            thumbnail: url,
          });
          if (msg === MSG_SUCCESS) {
            router.push("/admin/product");
          }
        }
      }
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    (async () => {
      const { message, data } = await getAllGroupProducts();
      if (message === MSG_SUCCESS) {
        setGroupProducts(data.items);
      }
    })();
  }, []);

  return (
    <AdminLayout pageTitle="Sản phẩm">
      <>
        <Head>
          <title>Cập nhật sản phẩm</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <AdminFormPaper title="Thông tin sản phẩm">
          <form onSubmit={handleSubmit(onSubmit)}>
            <Grid container rowSpacing={3} columnSpacing={3}>
              <Grid item xs={12}>
                <SelectControl
                  label="Nhóm sản phẩm"
                  register={register("groupProductId", {
                    required: {
                      value: true,
                      message: "Nhóm sản phẩm không được để trống",
                    },
                  })}
                  error={errors.groupProductId}
                  required={true}
                  options={groupProducts.map((item: GroupProduct) => ({
                    value: item.id,
                    display: item.name,
                  }))}
                />
              </Grid>
              <Grid item xs={12}>
                <InputControl
                  required={true}
                  register={register("name", {
                    required: {
                      value: true,
                      message: "Tên sản phẩm không được để trống",
                    },
                  })}
                  error={errors.name}
                  label="Tên sản phẩm"
                />
              </Grid>
              <Grid item xs={12}>
                <InputControl
                  type="number"
                  register={register("price")}
                  label="Giá bán"
                />
              </Grid>
              <Grid item xs={12}>
                <InputControl
                  type="number"
                  register={register("inventory")}
                  label="Số lượng"
                />
              </Grid>
              <Grid item xs={12}>
                <div className="form-group">
                  <textarea
                    id="description"
                    className="form-control"
                    autoComplete="off"
                    rows={4}
                    {...register("description")}
                  ></textarea>
                  <label htmlFor="description" className="form-label">
                    Mô tả
                  </label>
                </div>
              </Grid>
              <Grid item xs={12}>
                <InputControl
                  type="file"
                  onChange={(e: ChangeEvent<HTMLInputElement>) =>
                    setFiles(e.target.files)
                  }
                  label="Ảnh đại diện"
                />
              </Grid>
              <Grid item xs={12}>
                <ReactQuill theme="snow" value={detail} onChange={setDetail} />
              </Grid>
              <Grid item xs={12}>
                <FooterForm onBack={() => router.back()} />
              </Grid>
            </Grid>
          </form>
        </AdminFormPaper>
      </>
    </AdminLayout>
  );
};

export async function getServerSideProps(context: any) {
  const { id } = context.query;
  const { message, data } = await getProductById(+id);
  return message === MSG_SUCCESS
    ? {
        props: { product: data },
      }
    : {
        notFound: true,
      };
}
export default UpdateProduct;
