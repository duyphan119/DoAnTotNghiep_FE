import { Grid } from "@mui/material";
import dynamic from "next/dynamic";
import Head from "next/head";
import { useRouter } from "next/router";
import { ChangeEvent, useEffect, useMemo, useState } from "react";
import { SubmitHandler, useForm } from "react-hook-form";

import "react-quill/dist/quill.snow.css";
import { useSelector } from "react-redux";
import {
  AdminFormPaper,
  FooterForm,
  InputControl,
  SelectControl,
  TextAreaControl,
} from "../../../../components";
import { AdminLayout } from "../../../../layouts";
import {
  groupProductManagementActions,
  groupProductManagementSelector,
} from "../../../../redux/slice/groupProductManagementSlice";
import {
  productManagementActions,
  productManagementSelector,
} from "../../../../redux/slice/productManagementSlice";
import { useAppDispatch } from "../../../../redux/store";
import { fullNameGroupProduct } from "../../../../utils/helpers";
import { GroupProduct } from "../../../../utils/types";

type Props = {};

type ProductInputs = {
  name: string;
  groupProductId: number;
  slug: string;
  description: string;
  detail: string;
  price: number;
  inventory: number;
};

const Page = (props: Props) => {
  const ReactQuill = useMemo(
    () => dynamic(() => import("react-quill"), { ssr: false }),
    []
  );
  const router = useRouter();
  const appDispatch = useAppDispatch();
  const {
    isLoading,
    isBack,
    productEditing: product,
  } = useSelector(productManagementSelector);
  const { groupProductData } = useSelector(groupProductManagementSelector);
  const [detail, setDetail] = useState<string>("");
  const [files, setFiles] = useState<FileList | null>(null);
  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
  } = useForm<ProductInputs>();
  const onSubmit: SubmitHandler<ProductInputs> = async (data) => {
    if (product) {
      appDispatch(
        productManagementActions.fetchUpdateProduct({
          files,
          inputs: { ...data, detail },
          id: product.id,
        })
      );
    }
  };

  useEffect(() => {
    isBack && router.back();
  }, [isBack]);

  useEffect(() => {
    if (router.query.id)
      appDispatch(
        productManagementActions.fetchGetProductById(+router.query.id)
      );
  }, [router.query.id]);

  useEffect(() => {
    if (product) {
      setValue("name", product.name);
      setValue("groupProductId", product.groupProductId);
      setValue("slug", product.slug);
      setValue("detail", product.detail);
      setValue("inventory", product.inventory);
      setValue("description", product.description);
      setValue("price", product.price);
    }
  }, [product]);

  useEffect(() => {
    appDispatch(
      groupProductManagementActions.fetchGroupProductData({
        sortType: "asc",
        sortBy: "id",
      })
    );
  }, []);

  return (
    <AdminLayout pageTitle="Sản phẩm">
      <>
        <Head>
          <title>Cập nhật sản phẩm</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <AdminFormPaper title="Thông tin sản phẩm">
          <form onSubmit={handleSubmit(onSubmit)}>
            <Grid container rowSpacing={3} columnSpacing={3}>
              <Grid item xs={12}>
                <SelectControl
                  label="Nhóm sản phẩm"
                  register={register("groupProductId", {
                    required: {
                      value: true,
                      message: "Nhóm sản phẩm không được để trống",
                    },
                  })}
                  error={errors.groupProductId}
                  required={true}
                  options={groupProductData.items.map((item: GroupProduct) => ({
                    value: item.id,
                    display: fullNameGroupProduct(item),
                  }))}
                />
              </Grid>
              <Grid item xs={12}>
                <InputControl
                  required={true}
                  register={register("name", {
                    required: {
                      value: true,
                      message: "Tên sản phẩm không được để trống",
                    },
                  })}
                  error={errors.name}
                  label="Tên sản phẩm"
                />
              </Grid>
              <Grid item xs={12}>
                <InputControl
                  type="number"
                  register={register("price")}
                  label="Giá bán"
                />
              </Grid>
              <Grid item xs={12}>
                <InputControl
                  type="number"
                  register={register("inventory")}
                  label="Số lượng"
                />
              </Grid>
              <Grid item xs={12}>
                <TextAreaControl
                  register={register("description")}
                  label="Mô tả"
                  error={errors.description}
                />
              </Grid>
              <Grid item xs={12}>
                <InputControl
                  type="file"
                  onChange={(e: ChangeEvent<HTMLInputElement>) =>
                    setFiles(e.target.files)
                  }
                  label="Ảnh đại diện"
                />
              </Grid>
              <Grid item xs={12}>
                <ReactQuill theme="snow" value={detail} onChange={setDetail} />
              </Grid>
              <Grid item xs={12}>
                <FooterForm
                  onBack={() => router.back()}
                  isLoading={isLoading}
                />
              </Grid>
            </Grid>
          </form>
        </AdminFormPaper>
      </>
    </AdminLayout>
  );
};

export default Page;
