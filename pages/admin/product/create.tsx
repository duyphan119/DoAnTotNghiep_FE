import { Grid, Paper } from "@mui/material";
import dynamic from "next/dynamic";
import Head from "next/head";
import { useRouter } from "next/router";
import { ChangeEvent, useEffect, useState } from "react";
import { SubmitHandler, useForm } from "react-hook-form";

import "react-quill/dist/quill.snow.css";
import { useSelector } from "react-redux";
import { FooterForm, InputControl, SelectControl } from "../../../components";
import { AdminLayout } from "../../../layouts";
import {
  groupProductManagementActions,
  groupProductManagementSelector,
} from "../../../redux/slice/groupProductManagementSlice";
import {
  productManagementActions,
  productManagementSelector,
} from "../../../redux/slice/productManagementSlice";
import { useAppDispatch } from "../../../redux/store";
import { fullNameGroupProduct } from "../../../utils/helpers";
import { GroupProduct } from "../../../utils/types";

const ReactQuill = dynamic(() => import("react-quill"), { ssr: false });

type Props = {};

export type ProductInputs = {
  name: string;
  groupProductId: number;
  slug: string;
  description: string;
  detail: string;
  price: number;
  inventory: number;
};

const AddProduct = (props: Props) => {
  const router = useRouter();
  const appDispatch = useAppDispatch();
  const { groupProductData } = useSelector(groupProductManagementSelector);
  const { isLoading, isSuccess } = useSelector(productManagementSelector);
  const [detail, setDetail] = useState<string>("");
  const [files, setFiles] = useState<FileList | null>(null);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<ProductInputs>();
  const onSubmit: SubmitHandler<ProductInputs> = (data) => {
    appDispatch(
      productManagementActions.fetchCreateProduct({
        files,
        inputs: { ...data, detail },
      })
    );
  };

  useEffect(() => {
    isSuccess && router.back();
  }, [isSuccess]);

  useEffect(() => {
    appDispatch(
      groupProductManagementActions.fetchGroupProductData({
        sortType: "asc",
        sortBy: "id",
      })
    );
  }, []);

  return (
    <AdminLayout pageTitle="Sản phẩm">
      <>
        <Head>
          <title>Thêm mới sản phẩm</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Paper sx={{ padding: "16px" }}>
          <div
            style={{ fontSize: "2rem", fontWeight: "600", marginBottom: 16 }}
          >
            Thông tin thêm mới sản phẩm
          </div>
          <form onSubmit={handleSubmit(onSubmit)}>
            <Grid container rowSpacing={3} columnSpacing={3}>
              <Grid item xs={12}>
                <SelectControl
                  label="Nhóm sản phẩm"
                  register={register("groupProductId", {
                    required: {
                      value: true,
                      message: "Nhóm sản phẩm không được để trống",
                    },
                  })}
                  error={errors.groupProductId}
                  required={true}
                  options={groupProductData.items.map((item: GroupProduct) => ({
                    value: item.id,
                    display: fullNameGroupProduct(item),
                  }))}
                />
              </Grid>
              <Grid item xs={12}>
                <InputControl
                  required={true}
                  register={register("name", {
                    required: {
                      value: true,
                      message: "Tên sản phẩm không được để trống",
                    },
                  })}
                  error={errors.name}
                  label="Tên sản phẩm"
                />
              </Grid>
              <Grid item xs={12}>
                <InputControl
                  type="number"
                  register={register("price")}
                  label="Giá bán"
                />
              </Grid>
              <Grid item xs={12}>
                <InputControl
                  type="number"
                  register={register("inventory")}
                  label="Số lượng"
                />
              </Grid>
              <Grid item xs={12}>
                <div className="form-group">
                  <textarea
                    id="description"
                    className="form-control"
                    autoComplete="off"
                    rows={4}
                    {...register("description")}
                  ></textarea>
                  <label htmlFor="description" className="form-label">
                    Mô tả
                  </label>
                </div>
              </Grid>
              <Grid item xs={12}>
                <InputControl
                  type="file"
                  onChange={(e: ChangeEvent<HTMLInputElement>) =>
                    setFiles(e.target.files)
                  }
                  label="Ảnh đại diện"
                />
              </Grid>
              <Grid item xs={12}>
                <ReactQuill theme="snow" value={detail} onChange={setDetail} />
              </Grid>
              <Grid item xs={12}>
                <FooterForm
                  onBack={() => router.back()}
                  isLoading={isLoading}
                />
              </Grid>
            </Grid>
          </form>
        </Paper>
      </>
    </AdminLayout>
  );
};

export default AddProduct;
