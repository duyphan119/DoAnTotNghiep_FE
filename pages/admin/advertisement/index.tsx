import { ButtonControl, DataManagement, DataTable } from "@/components";
import { AdminLayout } from "@/layouts";
import { requireAdminProps } from "@/lib";
import { AdvertisementModel, UserModel } from "@/models";
import {
  advertisementActions,
  advertisementReducer,
  advertisementSelector,
} from "@/redux/slice/advertisementSlice";
import { confirmDialogActions } from "@/redux/slice/confirmDialogSlice";
import { fetchSelector } from "@/redux/slice/fetchSlice";
import { useAppDispatch } from "@/redux/store";
import { UserJson } from "@/types/json";
import helper from "@/utils/helpers";
import { GetServerSidePropsContext } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import { useCallback } from "react";
import { useSelector } from "react-redux";

type Props = { profile: UserJson | null };
const LIMIT = 10;
const Orders = ({ profile }: Props) => {
  const router = useRouter();
  const appDispatch = useAppDispatch();
  const { advertisementData } = useSelector(advertisementSelector);
  const { isLoading, reducer } = useSelector(fetchSelector);

  const handleDelete = (id: number) => {
    appDispatch(
      confirmDialogActions.show({
        onConfirm: () => {
          appDispatch(advertisementActions.fetchDeleteSingle(id));
        },
      })
    );
  };

  const handleFetch = useCallback(() => {
    const { p, sortBy, sortType, limit } = router.query;
    appDispatch(
      advertisementActions.fetchGetAll({
        p: +`${p}` || 1,
        limit: limit ? `${limit}` : LIMIT,
        sortBy: `${sortBy || "id"}`,
        sortType: `${sortType}` === "ASC" ? "ASC" : "DESC",
      })
    );
  }, [router.query]);

  const handleDeleteAll = (listId: number[]) => {
    appDispatch(advertisementActions.fetchDeleteMultiple(listId));
  };

  return (
    <AdminLayout pageTitle="Quảng cáo" profile={new UserModel(profile)}>
      <>
        <Head>
          <title>Quản lý quảng cáo</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <DataManagement
          paperTitle="Danh sách quảng cáo"
          count={advertisementData.count}
          limit={LIMIT}
          onFetch={handleFetch}
          onDeleteAll={handleDeleteAll}
        >
          <DataTable
            hasCheck={true}
            sortable={["id", "title", "createdAt", "page", "href"]}
            rows={advertisementData.items}
            columns={[
              {
                style: { width: 70, textAlign: "center" },
                display: "ID",
                key: "id",
              },
              {
                style: { textAlign: "center", width: 360 },
                key: "path",
                display: "Hình ảnh",
                render: (row: AdvertisementModel) => (
                  <Image
                    width={360}
                    height={200}
                    src={row.path}
                    alt=""
                    priority={true}
                  />
                ),
              },
              {
                style: { textAlign: "left" },
                key: "title",
                display: "Tiêu đề",
              },
              {
                style: { textAlign: "left" },
                key: "page",
                display: "Trang",
              },
              {
                style: { textAlign: "left" },
                key: "href",
                display: "Liên kết",
              },
              {
                style: { width: 120, textAlign: "center" },
                key: "createdAt",
                display: "Ngày tạo",
                render: (row: AdvertisementModel) =>
                  helper.formatDateTime(row.createdAt),
              },
              {
                style: { width: 100 },
                key: "actions",
                render: (row: AdvertisementModel) => (
                  <>
                    <div style={{ display: "flex", alignItems: "center" }}>
                      <Link href={`/admin/advertisement/${row.id}/update`}>
                        <ButtonControl color="secondary">Sửa</ButtonControl>
                      </Link>
                      <ButtonControl
                        color="error"
                        sx={{ ml: 1 }}
                        onClick={() => handleDelete(row.id)}
                      >
                        Xóa
                      </ButtonControl>
                    </div>
                  </>
                ),
              },
            ]}
            isLoading={
              reducer === advertisementReducer.fetchGetAll && isLoading
            }
          />
        </DataManagement>
      </>
    </AdminLayout>
  );
};
export const getServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  return requireAdminProps(context);
};

export default Orders;
