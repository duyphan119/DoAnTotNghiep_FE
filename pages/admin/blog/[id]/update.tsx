import { Grid } from "@mui/material";
import dynamic from "next/dynamic";
import Head from "next/head";
import { useRouter } from "next/router";
import { ChangeEvent, useEffect, useMemo, useState } from "react";
import { Controller, SubmitHandler, useForm } from "react-hook-form";
import "react-quill/dist/quill.snow.css";
import { useSelector } from "react-redux";
import { CreateBlogDTO, getBlogById } from "../../../../apis/blog";
import {
  AdminFormPaper,
  FooterForm,
  InputControl,
} from "../../../../components";
import { AdminLayout } from "../../../../layouts";
import {
  blogManagementActions,
  blogManagementSelector,
} from "../../../../redux/slice/blogManagementSlice";
import { useAppDispatch } from "../../../../redux/store";
import { MSG_SUCCESS } from "../../../../utils/constants";
import { RenderContentProps } from "../create";

type Props = {};

const UpdateBlog = (props: Props) => {
  const ReactQuill = useMemo(
    () => dynamic(() => import("react-quill"), { ssr: false }),
    []
  );
  const router = useRouter();
  const appDispatch = useAppDispatch();
  const [files, setFiles] = useState<FileList | null>(null);
  const { blogEditing, isLoading, isBack } = useSelector(
    blogManagementSelector
  );
  const {
    register,
    handleSubmit,
    control,
    formState: { errors },
    setValue,
  } = useForm<CreateBlogDTO>();

  const onSubmit: SubmitHandler<CreateBlogDTO> = (data) => {
    if (blogEditing) {
      appDispatch(
        blogManagementActions.fetchUpdateBlog({
          id: blogEditing.id,
          files,
          dto: data,
        })
      );
    }
  };

  useEffect(() => {
    const { id } = router.query;
    appDispatch(blogManagementActions.fetchGetBlogById(+`${id}`));
  }, [router.query]);

  useEffect(() => {
    if (blogEditing) {
      setValue("title", blogEditing.title);
      setValue("content", blogEditing.content);
    }
  }, [blogEditing]);

  useEffect(() => {
    if (isBack) router.back();
  }, [isBack]);

  return (
    <AdminLayout pageTitle="Chỉnh sửa bài viết">
      <>
        <Head>
          <title>Chỉnh sửa bài viết</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <AdminFormPaper title="Thông tin bài viết">
          <form onSubmit={handleSubmit(onSubmit)}>
            <Grid container rowSpacing={3} columnSpacing={3}>
              <Grid item xs={12}>
                <InputControl
                  required={true}
                  error={errors.title}
                  register={register("title", {
                    required: {
                      value: true,
                      message: "Tiêu đề không được để trống",
                    },
                  })}
                  label="Tiêu đề"
                />
              </Grid>
              <Grid item xs={12}>
                <InputControl
                  onChange={(e: ChangeEvent<HTMLInputElement>) =>
                    setFiles(e.target.files)
                  }
                  type="file"
                  label="Ảnh đại diện"
                />
              </Grid>
              <Grid item xs={12}>
                <div className="form-group">
                  {errors.content && errors.content.type === "validate" && (
                    <div className="form-error">{errors.content.message}</div>
                  )}
                  <Controller
                    control={control}
                    name="content"
                    rules={{
                      validate: (value) => {
                        if (value === "<p><br></p>") {
                          return "Nội dung không được để trống";
                        }
                      },
                    }}
                    render={(data: RenderContentProps) => {
                      return (
                        <ReactQuill
                          theme="snow"
                          value={data.field.value}
                          onChange={data.field.onChange}
                          placeholder="Nội dung bài viết"
                        />
                      );
                    }}
                  />
                </div>
              </Grid>
              <Grid item xs={12}>
                <FooterForm
                  onBack={() => router.back()}
                  isLoading={isLoading}
                />
              </Grid>
            </Grid>
          </form>
        </AdminFormPaper>
      </>
    </AdminLayout>
  );
};

export async function getServerSideProps(context: any) {
  try {
    const { id } = context.query;
    const { message, data } = await getBlogById(+id);
    if (message === MSG_SUCCESS) {
      return { props: { blog: data } };
    }
  } catch (error) {
    console.log("getServerSideProps - getBlogById - error", error);
  }
  return { notFound: true };
}
export default UpdateBlog;
