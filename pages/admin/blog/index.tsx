import CheckIcon from "@mui/icons-material/Check";
import ClearIcon from "@mui/icons-material/Clear";
import { GetServerSidePropsContext } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import { useEffect } from "react";
import { useSelector } from "react-redux";
import { ConfirmDialog, DataManagement } from "../../../components";
import { AdminLayout } from "../../../layouts";
import {
  blogManagementActions,
  blogManagementSelector,
} from "../../../redux/slice/blogManagementSlice";
import { useAppDispatch } from "../../../redux/store";
import { formatDateTime } from "../../../utils/helpers";
import { protectedRoutes } from "../../../utils/routes";
import { Blog } from "../../../utils/types";

type Props = {};
const LIMIT = 10;
const Page = (props: Props) => {
  const appDispatch = useAppDispatch();
  const { current, blogData, isDeleted } = useSelector(blogManagementSelector);
  const router = useRouter();

  const handleSoftDelete = (id: number) => {
    appDispatch(blogManagementActions.fetchSoftDeleteBlog(id));
  };

  const handleRestore = (id: number) => {
    appDispatch(blogManagementActions.fetchRestoreBlog(id));
  };

  const handleDelete = () => {
    if (current) appDispatch(blogManagementActions.fetchDeleteBlog(current.id));
  };

  useEffect(() => {
    const { p, sortBy, sortType } = router.query;
    appDispatch(
      blogManagementActions.fetchBlogData({
        p: +`${p}` || 1,
        limit: LIMIT,
        withDeleted: true,
        ...(sortBy ? { sortBy: `${sortBy}` } : {}),
        ...(sortType ? { sortType: `${sortType}` } : {}),
      })
    );
  }, [router.query, isDeleted]);

  return (
    <AdminLayout pageTitle="Bài viết">
      <>
        <Head>
          <title>Quản lý bài viết</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <DataManagement
          paperTitle="Danh sách bài viết"
          sortable={["title", "createdAt", "slug"]}
          rows={blogData.items}
          count={blogData.count}
          limit={LIMIT}
          hasCheck={false}
          columns={[
            {
              style: { width: 70, textAlign: "center" },
              display: "#",
              key: "index",
            },
            {
              style: { textAlign: "center", width: 220 },
              key: "thumbnail",
              display: "Ảnh đại diện",
              render: (row: Blog) => (
                <Image
                  width={220}
                  height={140}
                  src={row.thumbnail}
                  alt=""
                  priority={true}
                />
              ),
            },
            {
              style: { textAlign: "left" },
              key: "title",
              display: "Tiêu đề",
            },
            {
              style: { textAlign: "left" },
              key: "slug",
              display: "Bí danh",
            },
            {
              style: { width: 120, textAlign: "center" },
              key: "createdAt",
              display: "Ngày tạo",
              render: (row: any) => formatDateTime(row.createdAt),
            },
            {
              style: { width: 90, textAlign: "center" },
              key: "deletedAt",
              display: "Hiển thị",
              render: (row: any) =>
                row.deletedAt ? (
                  <ClearIcon
                    style={{ color: "#d32f2f" }}
                    onClick={() => handleRestore(row.id)}
                  />
                ) : (
                  <CheckIcon
                    style={{ color: "#33eb91" }}
                    onClick={() => handleSoftDelete(row.id)}
                  />
                ),
            },
            {
              style: { width: 100 },
              key: "actions",
              render: (row: any) => (
                <>
                  <div style={{ display: "flex", alignItems: "center" }}>
                    <Link href={protectedRoutes.updateBlog(row.id)}>
                      <button className="btnEdit">Sửa</button>
                    </Link>
                    <button
                      className="btnDelete"
                      style={{ marginLeft: "8px" }}
                      onClick={() =>
                        appDispatch(blogManagementActions.showDialog(row))
                      }
                    >
                      Xóa
                    </button>
                  </div>
                  {current ? (
                    <ConfirmDialog
                      open={current.id === row.id ? true : false}
                      onClose={() =>
                        appDispatch(blogManagementActions.hideDialog())
                      }
                      onConfirm={handleDelete}
                      title="Xác nhận"
                      text="Bạn có chắc chắn muốn xóa không?"
                    />
                  ) : null}
                </>
              ),
            },
          ]}
        />
      </>
    </AdminLayout>
  );
};

export default Page;
