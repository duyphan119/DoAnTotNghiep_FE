import EditIcon from "@mui/icons-material/Edit";
import SaveIcon from "@mui/icons-material/Save";
import { Avatar, FormControl, FormLabel, TextField } from "@mui/material";
import Head from "next/head";
import { useEffect, useState } from "react";
import { SubmitHandler, useForm } from "react-hook-form";
import { useSelector } from "react-redux";
import { ButtonControl } from "../../../components";
import { AdminLayout } from "../../../layouts";
import { authActions, authSelector } from "../../../redux/slice/authSlice";
import { useAppDispatch } from "../../../redux/store";
import styles from "../../../styles/_SettingProfile.module.scss";
import { ChangeProfileDTO } from "../../../types/dtos";

type Props = {};

const Profile = () => {
  const appDispatch = useAppDispatch();
  const { profile } = useSelector(authSelector);

  const [enabledForm, setEnabledForm] = useState<boolean>(false);

  const {
    register,
    formState: { errors },
    handleSubmit,
    setValue,
  } = useForm<ChangeProfileDTO>();

  const onSubmit: SubmitHandler<ChangeProfileDTO> = (data) => {
    console.log(data);
    appDispatch(authActions.fetchChangeProfile(data));
    handleToggle();
  };

  const handleToggle = () => {
    setEnabledForm((state) => !state);
  };

  useEffect(() => {
    if (profile) {
      setValue("fullName", profile.fullName);
      setValue("phone", profile.phone);
    }
  }, [profile]);

  if (!profile || profile.id === 0) return <></>;

  return (
    <form onSubmit={handleSubmit(onSubmit)} className={styles.profileWrapper}>
      <div className={styles.headingWrapper}>
        <div className={styles.headingTop}></div>
        <div className={styles.headingBottom}>
          <div className={styles.information}>
            {enabledForm ? (
              <>
                <TextField size="small" {...register("fullName")} />
              </>
            ) : (
              profile.fullName
            )}
          </div>
          <div className={styles.actions}>
            {enabledForm ? (
              <>
                <ButtonControl
                  autoFocus={true}
                  variant="outlined"
                  onClick={handleToggle}
                >
                  Huỷ
                </ButtonControl>
                <ButtonControl type="submit" startIcon={<SaveIcon />}>
                  Lưu
                </ButtonControl>
              </>
            ) : (
              <ButtonControl startIcon={<EditIcon />} onClick={handleToggle}>
                Sửa
              </ButtonControl>
            )}
          </div>
        </div>
        <div className={styles.avatar}>
          <Avatar sx={{ width: 100, height: 100 }} />
        </div>
      </div>
      <ul className={styles.controls}>
        <li className={styles.controlWrapper}>
          <FormLabel className={styles.label}>Email</FormLabel>
          <FormControl className={styles.control}>
            <TextField
              size="small"
              defaultValue={profile.email}
              disabled={true}
              sx={{ width: "320px" }}
            />
          </FormControl>
        </li>
        <li className={styles.controlWrapper}>
          <FormLabel className={styles.label}>Số điện thoại</FormLabel>
          <FormControl className={styles.control}>
            <TextField
              size="small"
              disabled={!enabledForm}
              sx={{ width: "160px" }}
              {...register("phone", {
                required: {
                  value: true,
                  message: "Số điện thoại không được để trống",
                },
              })}
            />
          </FormControl>
        </li>
      </ul>
    </form>
  );
};

const Page = (props: Props) => {
  return (
    <AdminLayout pageTitle="Thông tin tài khoản">
      <>
        <Head>
          <title>Thông tin tài khoản</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Profile />
      </>
    </AdminLayout>
  );
};

export default Page;
