import { Grid, Paper } from "@mui/material";
import Head from "next/head";
import { useRouter } from "next/router";
import { ChangeEvent, useState } from "react";
import { SubmitHandler, useForm } from "react-hook-form";
import {
  CreateGroupProductDTO,
  getGroupProductById,
  updateGroupProduct,
} from "../../../../apis/groupProduct";
import { uploadSingle } from "../../../../apis/upload";
import {
  AdminFormPaper,
  FooterForm,
  InputControl,
  SelectControl,
} from "../../../../components";
import { AdminLayout } from "../../../../layouts";
import { MSG_SUCCESS } from "../../../../utils/constants";
import { GroupProduct } from "../../../../utils/types";

type Props = { groupProduct: GroupProduct };

const UpdateGroupProduct = ({ groupProduct }: Props) => {
  const router = useRouter();

  const [files, setFiles] = useState<FileList | null>(null);
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<CreateGroupProductDTO>({
    defaultValues: {
      name: groupProduct.name,
      description: groupProduct.description,
      sex: groupProduct.sex,
      isAdult: groupProduct.isAdult,
    },
  });

  console.log({ groupProduct });

  const onSubmit: SubmitHandler<CreateGroupProductDTO> = async (data) => {
    try {
      let url = "";
      if (files) {
        const formData = new FormData();
        formData.append("image", files[0]);
        const { message, data: dataImage } = await uploadSingle(formData);
        if (message === MSG_SUCCESS) {
          console.log("Uploaded file: ", dataImage);
          url = dataImage.secure_url;
        }
      }
      const { message: msg } = await updateGroupProduct(groupProduct.id, {
        ...data,
        isAdult: "" + data.isAdult === "true" ? true : false,
        ...(url !== "" ? { thumbnail: url } : {}),
      });
      if (msg === MSG_SUCCESS) {
        router.push("/admin/group-product");
      }
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <AdminLayout pageTitle="Sản phẩm">
      <>
        <Head>
          <title>Cập nhật nhóm sản phẩm</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <AdminFormPaper title="Thông tin nhóm sản phẩm">
          <form onSubmit={handleSubmit(onSubmit)}>
            <Grid container rowSpacing={3} columnSpacing={3}>
              <Grid item xs={12}>
                <InputControl
                  label="Tên nhóm sản phẩm"
                  error={errors.name}
                  register={register("name", {
                    required: {
                      value: true,
                      message: "Tên không được để trống",
                    },
                  })}
                  required={true}
                />
              </Grid>
              <Grid item xs={12}>
                <InputControl
                  label="Mô tả"
                  error={errors.description}
                  register={register("description")}
                />
              </Grid>
              <Grid item xs={12}>
                <SelectControl
                  label="Giới tính"
                  register={register("sex")}
                  options={[
                    { value: "Nam" },
                    { value: "Nữ" },
                    { value: "Unisex" },
                  ]}
                />
              </Grid>
              <Grid item xs={12}>
                <SelectControl
                  label="Đối tượng"
                  register={register("isAdult")}
                  options={[
                    { value: true, display: "Người lớn" },
                    { value: false, display: "Trẻ em" },
                  ]}
                />
              </Grid>
              <Grid item xs={12}>
                <InputControl
                  label="Ảnh đại diện"
                  error={errors.description}
                  onChange={(e: ChangeEvent<HTMLInputElement>) =>
                    setFiles(e.target.files)
                  }
                  type="file"
                />
              </Grid>
              <Grid item xs={12}>
                <FooterForm onBack={() => router.back()} />
              </Grid>
            </Grid>
          </form>
        </AdminFormPaper>
      </>
    </AdminLayout>
  );
};

export async function getServerSideProps(context: any) {
  const { id } = context.query;
  const { message, data } = await getGroupProductById(+id);
  return message === MSG_SUCCESS
    ? {
        props: { groupProduct: data },
      }
    : {
        notFound: true,
      };
}
export default UpdateGroupProduct;
