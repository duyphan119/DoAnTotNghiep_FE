import { Grid } from "@mui/material";
import Head from "next/head";
import { useRouter } from "next/router";
import { ChangeEvent, useEffect, useState } from "react";
import { SubmitHandler, useForm } from "react-hook-form";
import { useSelector } from "react-redux";
import { CreateGroupProductDTO } from "../../../../apis/groupProduct";
import {
  AdminFormPaper,
  FooterForm,
  InputControl,
  NotFound,
  SelectControl,
} from "../../../../components";
import { AdminLayout } from "../../../../layouts";
import {
  groupProductManagementActions,
  groupProductManagementSelector,
} from "../../../../redux/slice/groupProductManagementSlice";
import { useAppDispatch } from "../../../../redux/store";

type Props = {};

const UpdateGroupProduct = (props: Props) => {
  const router = useRouter();
  const appDispatch = useAppDispatch();
  const {
    isBack,
    groupProductEditing: groupProduct,
    isLoading,
    isSuccess,
  } = useSelector(groupProductManagementSelector);
  const [files, setFiles] = useState<FileList | null>(null);
  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
  } = useForm<CreateGroupProductDTO>();

  const onSubmit: SubmitHandler<CreateGroupProductDTO> = (data) => {
    if (groupProduct)
      appDispatch(
        groupProductManagementActions.fetchUpdateGroupProduct({
          id: groupProduct.id,
          dto: {
            ...data,
            isAdult: "" + data.isAdult === "true" ? true : false,
          },
          files,
        })
      );
  };

  useEffect(() => {
    const { id } = router.query;
    appDispatch(
      groupProductManagementActions.fetchGetGroupProductById(+`${id}`)
    );
  }, [router.query]);

  useEffect(() => {
    if (isBack) router.back();
  }, [isBack]);

  useEffect(() => {
    if (groupProduct) {
      setValue("name", groupProduct.name);
      setValue("description", groupProduct.description);
      setValue("isAdult", groupProduct.isAdult);
      setValue("sex", groupProduct.sex);
    }
  }, [groupProduct]);

  if (isSuccess && !groupProduct) return <NotFound />;

  return (
    <AdminLayout pageTitle="Sản phẩm">
      <>
        <Head>
          <title>Cập nhật nhóm sản phẩm</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <AdminFormPaper title="Thông tin nhóm sản phẩm">
          <form onSubmit={handleSubmit(onSubmit)}>
            <Grid container rowSpacing={3} columnSpacing={3}>
              <Grid item xs={12}>
                <InputControl
                  label="Tên nhóm sản phẩm"
                  error={errors.name}
                  register={register("name", {
                    required: {
                      value: true,
                      message: "Tên không được để trống",
                    },
                  })}
                  required={true}
                />
              </Grid>
              <Grid item xs={12}>
                <InputControl
                  label="Mô tả"
                  error={errors.description}
                  register={register("description")}
                />
              </Grid>
              <Grid item xs={12}>
                <SelectControl
                  label="Giới tính"
                  register={register("sex")}
                  options={[{ value: "Nam" }, { value: "Nữ" }]}
                />
              </Grid>
              <Grid item xs={12}>
                <SelectControl
                  label="Đối tượng"
                  register={register("isAdult")}
                  options={[
                    { value: true, display: "Người lớn" },
                    { value: false, display: "Trẻ em" },
                  ]}
                />
              </Grid>
              <Grid item xs={12}>
                <InputControl
                  label="Ảnh đại diện"
                  error={errors.description}
                  onChange={(e: ChangeEvent<HTMLInputElement>) =>
                    setFiles(e.target.files)
                  }
                  type="file"
                />
              </Grid>
              <Grid item xs={12}>
                <FooterForm
                  onBack={() => router.back()}
                  isLoading={groupProduct && isLoading ? true : false}
                />
              </Grid>
            </Grid>
          </form>
        </AdminFormPaper>
      </>
    </AdminLayout>
  );
};

export default UpdateGroupProduct;
