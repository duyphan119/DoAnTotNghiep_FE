import { ButtonControl, DataManagement, DataTable } from "@/components";
import { AdminLayout } from "@/layouts";
import { GroupProductModel } from "@/models";
import { confirmDialogActions } from "@/redux/slice/confirmDialogSlice";
import {
  groupProductActions,
  groupProductSelector,
} from "@/redux/slice/groupProductSlice";
import { useAppDispatch } from "@/redux/store";
import helper from "@/utils/helpers";
import { protectedRoutes } from "@/utils/routes";
import CheckIcon from "@mui/icons-material/Check";
import ClearIcon from "@mui/icons-material/Clear";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import { useEffect } from "react";
import { useSelector } from "react-redux";
import { UserJson } from "@/types/json";
import { UserModel } from "@/models";
import { requireAdminProps } from "@/lib";
import { GetServerSidePropsContext } from "next";

type Props = { profile: UserJson | null };
const LIMIT = 10;
const GroupProducts = ({ profile }: Props) => {
  const appDispatch = useAppDispatch();
  const router = useRouter();
  const { groupProductData, isDeleted } = useSelector(groupProductSelector);
  const handleDeleteAll = (ids: number[]) => {
    appDispatch(
      confirmDialogActions.show({
        onConfirm: () => {
          appDispatch(groupProductActions.fetchSoftDeleteMultiple(ids));
        },
      })
    );
  };

  useEffect(() => {
    const { p, sortBy, sortType } = router.query;
    appDispatch(
      groupProductActions.fetchGetAll({
        p: +`${p}` || 1,
        limit: LIMIT,
        sortBy: `${sortBy || "id"}`,
        sortType: `${sortType}` === "ASC" ? "ASC" : "DESC",
      })
    );
  }, [router.query, isDeleted]);

  return (
    <AdminLayout pageTitle="Nhóm sản phẩm" profile={new UserModel(profile)}>
      <>
        <Head>
          <title>Quản lý nhóm sản phẩm</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <DataManagement
          paperTitle="Danh sách nhóm sản phẩm"
          count={groupProductData.count}
          limit={LIMIT}
          onDeleteAll={handleDeleteAll}
        >
          <DataTable
            rows={groupProductData.items}
            sortable={["id", "name", "slug", "sex", "isAdult", "createdAt"]}
            hasCheck={true}
            columns={[
              {
                style: { width: 70, textAlign: "center" },
                display: "ID",
                key: "id",
              },
              {
                style: { textAlign: "left" },
                key: "name",
                display: "Tên nhóm sản phẩm",
                render: (row: GroupProductModel) => (
                  <div
                    style={{
                      display: "flex",
                      alignItems: "center",
                      gap: "16px",
                    }}
                  >
                    {row.thumbnail ? (
                      <div>
                        <Image
                          alt=""
                          width={72}
                          height={72}
                          priority={true}
                          src={row.thumbnail}
                        />
                      </div>
                    ) : null}
                    {row.name}
                  </div>
                ),
              },
              {
                style: { width: 90, textAlign: "center" },
                key: "sex",
                display: "Giới tính",
              },
              {
                style: { width: 90, textAlign: "center" },
                key: "isAdult",
                display: "Người lớn",
                render: (row: GroupProductModel) =>
                  row.isAdult ? (
                    <CheckIcon style={{ color: "#33eb91" }} />
                  ) : (
                    <ClearIcon style={{ color: "#d32f2f" }} />
                  ),
              },
              {
                style: { textAlign: "left" },
                key: "slug",
                display: "Bí danh",
              },
              {
                style: { textAlign: "left" },
                key: "description",
                display: "Mô tả",
              },
              {
                style: { width: 100, textAlign: "center" },
                key: "createdAt",
                display: "Ngày tạo",
                render: (row: GroupProductModel) =>
                  helper.formatDateTime(row.createdAt),
              },
              {
                style: { width: 152 },
                key: "actions",
                render: (row: GroupProductModel) => (
                  <>
                    <div style={{ display: "flex", alignItems: "center" }}>
                      <Link href={protectedRoutes.updateGroupProduct(row.id)}>
                        <ButtonControl color="secondary" size="small">
                          Sửa
                        </ButtonControl>
                      </Link>
                      <ButtonControl
                        color="error"
                        onClick={() =>
                          appDispatch(
                            confirmDialogActions.show({
                              onConfirm: () => {
                                appDispatch(
                                  groupProductActions.fetchSoftDeleteSingle(
                                    row.id
                                  )
                                );
                              },
                            })
                          )
                        }
                        sx={{ ml: 1 }}
                        size="small"
                      >
                        Xóa
                      </ButtonControl>
                    </div>
                  </>
                ),
              },
            ]}
          />
        </DataManagement>
      </>
    </AdminLayout>
  );
};
export const getServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  return requireAdminProps(context);
};

export default GroupProducts;
