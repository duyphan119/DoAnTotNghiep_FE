import { Button } from "@mui/material";
import Head from "next/head";
import React, { useState, useEffect } from "react";
import { deleteUserAddress } from "../../apis/useraddress";
import { ConfirmDialog, ModalUserAddress } from "../../components";
import { AccountLayout } from "../../layouts";
import { MSG_SUCCESS } from "../../utils/constants";
import { UserAddress } from "../../utils/types";
import AddIcon from "@mui/icons-material/Add";
import { useAppDispatch } from "../../redux/store";
import {
  userAddressActions,
  userAddressSelector,
} from "../../redux/slice/userAddressSlice";
import { useSelector } from "react-redux";

type Props = {};

const AddressList = (props: Props) => {
  const appDispatch = useAppDispatch();
  const { userAddresses, current, openDialog, openModal } =
    useSelector(userAddressSelector);

  const handleDelete = () => {
    if (current)
      appDispatch(userAddressActions.fetchDeleteUserAddress(current.id));
  };

  useEffect(() => {
    appDispatch(userAddressActions.fetchGetUserAddresses());
  }, []);

  return (
    <AccountLayout titleHeading="Sổ địa chỉ">
      <>
        <Head>
          <title>Sổ địa chỉ</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
      </>
      <main>
        <Button
          variant="contained"
          onClick={() => appDispatch(userAddressActions.showModal(null))}
          sx={{ mb: 2 }}
          startIcon={<AddIcon />}
        >
          Thêm địa chỉ mới
        </Button>
        {userAddresses.length > 0 ? (
          <table className="table">
            <thead>
              <tr>
                <th>#</th>
                <th style={{ textAlign: "left" }}>Địa chỉ</th>
                <th style={{ width: "100px" }}></th>
              </tr>
            </thead>
            <tbody>
              {userAddresses.map((userAddress: UserAddress, index: number) => {
                return (
                  <tr key={userAddress.id}>
                    <td style={{ textAlign: "center" }}>{index + 1}</td>
                    <td>
                      {userAddress.address},&nbsp;{userAddress.ward},&nbsp;
                      {userAddress.district},&nbsp;{userAddress.province}
                    </td>
                    <td>
                      <div style={{ display: "flex", alignItems: "center" }}>
                        <button
                          className="btnEdit"
                          onClick={() =>
                            appDispatch(
                              userAddressActions.showModal(userAddress)
                            )
                          }
                        >
                          Sửa
                        </button>
                        <button
                          className="btnDelete"
                          style={{ marginLeft: "8px" }}
                          onClick={() =>
                            appDispatch(
                              userAddressActions.showDialog(userAddress)
                            )
                          }
                        >
                          Xóa
                        </button>
                      </div>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        ) : null}
        {openDialog ? (
          <ConfirmDialog
            open={openDialog}
            onClose={() => appDispatch(userAddressActions.closeDialog())}
            title="Xác nhận"
            text="Bạn có chắc chắn xóa địa chỉ này?"
            onConfirm={handleDelete}
          />
        ) : null}
        {openModal ? (
          <ModalUserAddress
            open={openModal}
            onClose={() => appDispatch(userAddressActions.closeModal())}
            row={current}
          />
        ) : null}
      </main>
    </AccountLayout>
  );
};

export default AddressList;
