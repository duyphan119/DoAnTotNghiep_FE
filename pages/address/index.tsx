import { ButtonControl, ModalUserAddress } from "@/components";
import { AccountLayout } from "@/layouts";
import { requireLoginProps } from "@/lib";
import { UserAddressModel, UserModel } from "@/models";
import { confirmDialogActions } from "@/redux/slice/confirmDialogSlice";
import {
  userAddressActions,
  userAddressSelector,
} from "@/redux/slice/userAddressSlice";
import { useAppDispatch } from "@/redux/store";
import { UserJson } from "@/types/json";
import AddIcon from "@mui/icons-material/Add";
import { GetServerSidePropsContext } from "next";
import Head from "next/head";
import { useEffect } from "react";
import { useSelector } from "react-redux";

type Props = {
  profile: UserJson | null;
};

const LIMIT = 10;
const Page = ({ profile }: Props) => {
  const appDispatch = useAppDispatch();
  const { userAddressData, current, openModal } =
    useSelector(userAddressSelector);

  const handleDelete = (id: number) => {
    appDispatch(
      confirmDialogActions.show({
        onConfirm: () => {
          appDispatch(userAddressActions.fetchDelete(id));
        },
      })
    );
  };

  useEffect(() => {
    appDispatch(userAddressActions.fetchGetAll({ limit: LIMIT }));
  }, []);

  return (
    <AccountLayout profile={new UserModel(profile)} titleHeading="Sổ địa chỉ">
      <>
        <Head>
          <title>Sổ địa chỉ</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
      </>
      <main>
        <ButtonControl
          onClick={() =>
            appDispatch(userAddressActions.showModal(new UserAddressModel()))
          }
          sx={{ mb: 2 }}
          startIcon={<AddIcon />}
        >
          Thêm địa chỉ mới
        </ButtonControl>
        {userAddressData.count > 0 ? (
          <table className="table">
            <thead>
              <tr>
                <th>#</th>
                <th style={{ textAlign: "left" }}>Địa chỉ</th>
                <th style={{ width: "100px" }}></th>
              </tr>
            </thead>
            <tbody>
              {userAddressData.items.map((userAddress, index) => {
                return (
                  <tr key={userAddress.id}>
                    <td style={{ textAlign: "center" }}>{index + 1}</td>
                    <td>{userAddress.getFullAddress()}</td>
                    <td>
                      <div style={{ display: "flex", alignItems: "center" }}>
                        <ButtonControl
                          color="secondary"
                          onClick={() =>
                            appDispatch(
                              userAddressActions.showModal(userAddress)
                            )
                          }
                        >
                          Sửa
                        </ButtonControl>
                        <ButtonControl
                          color="error"
                          sx={{ ml: 1 }}
                          onClick={() => handleDelete(userAddress.id)}
                        >
                          Xóa
                        </ButtonControl>
                      </div>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        ) : null}
        {openModal ? (
          <ModalUserAddress
            open={openModal}
            onClose={() => appDispatch(userAddressActions.closeModal())}
            row={current}
          />
        ) : null}
      </main>
    </AccountLayout>
  );
};

export const getServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  return requireLoginProps(context);
};

export default Page;
