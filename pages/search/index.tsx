import { ProductApi } from "@/api";
import { ProductCard } from "@/components";
import { DefaultLayout } from "@/layouts";
import { getProfileProps } from "@/lib";
import { ProductModel, ResponseGetAllModel, UserModel } from "@/models";
import { ProductJson, UserJson } from "@/types/json";
import helper from "@/utils/helpers";
import { publicRoutes } from "@/utils/routes";
import { Container, Grid, Pagination } from "@mui/material";
import { GetServerSidePropsContext } from "next";
import Head from "next/head";
import { useRouter } from "next/router";

type Props = {
  productData: { items: ProductJson[]; count: number };
  profile: UserJson | null;
};

const LIMIT = 10;
const pApi = new ProductApi();
const Page = ({ productData: { items, count }, profile }: Props) => {
  const router = useRouter();
  const { q } = router.query;
  const productData = new ResponseGetAllModel<ProductModel>(
    pApi.getListFromJson(items),
    count
  );

  const handleChangePage = (p: number) => {
    router.push(
      helper.getPathFromSearchParams(
        publicRoutes.search(),
        p > 1 ? { q: `${q}`, p } : { q: `${q}` }
      )
    );
  };

  return (
    <DefaultLayout profile={new UserModel(profile)}>
      <Head>
        <title>Kết quả tìm kiếm</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container maxWidth="lg">
        <h1 style={{ marginBottom: "12px" }}>Kết quả tìm kiếm "{q || ""}"</h1>
        <Grid container columnSpacing={2} rowSpacing={2}>
          {productData.items.map((product) => {
            return (
              <Grid
                item
                xs={6}
                sm={4}
                md={3}
                key={product.id}
                sx={{
                  flexBasis: {
                    lg: "20%",
                  },
                }}
              >
                <ProductCard product={product} />
              </Grid>
            );
          })}
          {productData.count > LIMIT ? (
            <Grid item xs={12}>
              <Pagination
                count={Math.ceil(productData.count / LIMIT)}
                sx={{ ul: { justifyContent: "center" } }}
                variant="outlined"
                shape="rounded"
                showLastButton
                showFirstButton
                page={router.query.p ? +router.query.p : 1}
                onChange={(e, page) => handleChangePage(page)}
                color="primary"
              />
            </Grid>
          ) : (
            <Grid item xs={12}>
              Không tìm thấy sản phẩm
            </Grid>
          )}
        </Grid>
      </Container>
    </DefaultLayout>
  );
};

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const { q, p } = context.query;
  const data = await pApi.getAllJson({
    q: `${q}`,
    limit: LIMIT,
    p: p ? +`${p}` : 1,
  });
  const { props } = await getProfileProps(context);
  return {
    props: {
      ...props,
      productData: data,
    },
  };
}

export default Page;
