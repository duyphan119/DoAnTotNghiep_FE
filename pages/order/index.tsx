import { AccountLayout } from "@/layouts";
import { requireLoginProps } from "@/lib";
import { OrderItemModel, OrderModel, UserModel } from "@/models";
import { authActions, authSelector } from "@/redux/slice/authSlice";
import { useAppDispatch } from "@/redux/store";
import styles from "@/styles/_FollowOrder.module.scss";
import { UserJson } from "@/types/json";
import helper from "@/utils/helpers";
import { Grid, Pagination } from "@mui/material";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { GetServerSidePropsContext } from "next/types";
import { useEffect } from "react";
import { useSelector } from "react-redux";

const LIMIT = 10;

type Props = {
  profile: UserJson | null;
};

type OrderProps = {
  order: OrderModel;
};

type OrderItemProps = {
  item: OrderItemModel;
};

const Item = ({ item }: OrderItemProps) => {
  return item.id > 0 ? (
    <>
      <Image
        width={100}
        height={120}
        src={item.getThumbnail()}
        alt="thumbnail"
        priority={true}
      />
      <div className={styles.product}>
        <div className={styles.name}>{item.productVariant?.product?.name}</div>
        {item.productVariant?.variantValues?.map((variantValue) => {
          return (
            <div
              className={styles.variantValue}
              key={`${item?.productVariantId} - ${variantValue.id}`}
            >
              {variantValue.variant?.name}: {variantValue.value}
            </div>
          );
        })}
        <div className={styles.quantity}>Số lượng: {item.quantity}</div>
        <div className={styles.price}>{item.price}</div>
      </div>
    </>
  ) : null;
};

const MyOrder = ({ order }: OrderProps) => {
  return order.id > 0 ? (
    <div className={styles.order}>
      <div className={styles.title}>
        <div className={styles.left}>
          <div>
            Đơn hàng {order.id} - {order.status}
          </div>
          <div>Ngày: {helper.formatDateTime(order.createdAt)}</div>
          <div>Họ tên: {order.fullName}</div>
          <div>Điện thoại: {order.phone}</div>
          <div>Địa chỉ: {order.getFullAddress()}</div>
        </div>
        <div className={styles.right}>
          <div className={styles.row}>
            <span>Giá gốc: </span>
            <span>{order.getTotalPrice()}</span>
          </div>
          <div className={styles.row}>
            <span>Giảm giá: </span>
            <span>0đ</span>
          </div>
          <div className={styles.row}>
            <span>Tổng cộng: </span>
            <span>{order.getTotalPrice()}</span>
          </div>
          <div>
            <button
              className={styles.btn}
              disabled={order.status !== "Đang xử lý"}
            >
              Hủy
            </button>
          </div>
        </div>
      </div>
      <ul className={styles.items}>
        {order.items.map((item) => {
          return (
            <li
              className={styles.item}
              key={`${order?.id} - ${item.productVariantId}`}
            >
              <Item item={item} />
            </li>
          );
        })}
      </ul>
    </div>
  ) : null;
};

const FollowOrder = ({ profile }: Props) => {
  const router = useRouter();
  const appDispatch = useAppDispatch();
  const { orderData } = useSelector(authSelector);

  const handleChange = (p: number) => {
    const paramsObj: any = { ...router.query };
    if (p > 1) {
      paramsObj.p = p;
    } else {
      delete paramsObj.p;
    }
    const searchParams: string = new URLSearchParams(paramsObj).toString();
    router.push(`${window.location.pathname}?${searchParams}`);
  };

  useEffect(() => {
    appDispatch(
      authActions.fetchUserOrderData({
        ...router.query,
        limit: LIMIT,
        items: true,
      })
    );
  }, [router.query]);

  return (
    <AccountLayout
      profile={new UserModel(profile)}
      titleHeading="Đơn hàng của tôi"
    >
      <>
        <Head>
          <title>Đơn hàng của tôi</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
      </>
      <Grid container columnSpacing={2} rowSpacing={2}>
        {orderData.items.map((order) => {
          return (
            <Grid item xs={12} key={order.id}>
              <MyOrder order={order} />
            </Grid>
          );
        })}
        {orderData.count > 0 ? (
          <Grid item xs={12}>
            <Pagination
              count={Math.ceil(orderData.count / LIMIT)}
              sx={{ ul: { justifyContent: "center" } }}
              variant="outlined"
              shape="rounded"
              showLastButton
              showFirstButton
              page={router.query && router.query.p ? +router.query.p : 1}
              onChange={(e, page) => handleChange(page)}
              color="primary"
            />
          </Grid>
        ) : null}
      </Grid>
    </AccountLayout>
  );
};

export const getServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  return requireLoginProps(context);
};

export default FollowOrder;
